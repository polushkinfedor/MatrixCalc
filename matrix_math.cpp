#include "matrix_math.h"

// --------------------------------------------------------------------------------------------------------------------
// Служебная функция расчета определителя
// --------------------------------------------------------------------------------------------------------------------
void matrix::calc_det() {
    ;
}


// --------------------------------------------------------------------------------------------------------------------
// БЛОК КОНСТРУТОРОВ
// --------------------------------------------------------------------------------------------------------------------
matrix::matrix() {
    ;
}

matrix::matrix(int n) {
    ;
}

matrix::matrix(int n, int m, int type) {
    ;
}

matrix::matrix(const int &matrix_value) {
    ;
}


// --------------------------------------------------------------------------------------------------------------------
// GET функции
// --------------------------------------------------------------------------------------------------------------------
type_info matrix::matrix_data_type() {
    ;
}

double matrix::det() {
    ;
}

int matrix::line_size() {
    ;
}

int matrix::column_size() {
    ;
}


// --------------------------------------------------------------------------------------------------------------------
// БЛОК ПЕРЕГРУЖЕННЫХ ОПЕРАТОРОВ
// --------------------------------------------------------------------------------------------------------------------
// ------------------------------------------------------
// copy
matrix matrix::operator = (const matrix& sec_matrix) {
    ;
}
// ------------------------------------------------------

// ------------------------------------------------------
// multiply
matrix matrix::operator * (const val_type number) {
    ;
}

matrix matrix::operator * (const matrix& sec_matrix) {
    ;
}
// ------------------------------------------------------

// ------------------------------------------------------
// division
matrix matrix::operator / (const val_type number) {
    ;
}

matrix matrix::operator / (const matrix& sec_matrix) {
    ;
}
// ------------------------------------------------------

// ------------------------------------------------------
// plus
matrix matrix::operator + (const val_type number) {
    ;
}

matrix matrix::operator + (const matrix& sec_matrix) {
    ;
}
// ------------------------------------------------------

// ------------------------------------------------------
// subtraction
matrix matrix::operator - (const val_type number) {
    ;
}

matrix matrix::operator - (const matrix& sec_matrix) {
    ;
}
// ------------------------------------------------------


// --------------------------------------------------------------------------------------------------------------------
// БЛОК ФУНКЦИЙ ОПЕРАЦИЙ С МАТРИЦАМИ
// --------------------------------------------------------------------------------------------------------------------
matrix matix::calc_inverse_matrix() {
    ;
}


// --------------------------------------------------------------------------------------------------------------------
// БЛОК ФУНКЦИЙ ПРОВЕРОК ДОПУСТИМОСТИ МАТ.ДЕЙСТВИЙ
// --------------------------------------------------------------------------------------------------------------------
// ---------------------------------------------------------------------
bool is_zero_determenant() {
    // Проверка для определения допустимости взятия обратной матрицы
    ;
}

bool can_ariphmetic_op_matrix(const matrix& sec_matrix) {
    // Проверка для определения допустимости арифметических операций (-, +)
    ;
}

bool can_algebra_op_matrix(const val_type sec_matrix) {
    // Проверка для определения допустимости алгебраических операций (*, /)
}

bool can_algebra_op_matrix(const matrix& sec_matrix) {
    // Проверка для определения допустимости алгебраических операций (*, /)
}